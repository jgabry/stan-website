---
pagetitle: "Stan Toolkit"
page-layout: full
toc-location: right
---

# Stan Toolkit

A curated collection of tools and interfaces to help you work effectively with Stan across various programming environments and stages of your modeling workflow.

---

## Language-Specific Stan Interfaces

*Write, compile, and run Stan models directly within your programming environment.*

| **Language** | **Tool** | **Description** |
|--------------|----------|-----------------|
| **R**        | [**CmdStanR**](https://mc-stan.org/cmdstanr) | Interface to Stan for R, based on CmdStan. **Recommended interface for R users.** |
| **Python**   | [**CmdStanPy**](https://mc-stan.org/cmdstanpy) | Interface to Stan for Python, based on CmdStan. **Recommended interface for Python users.** |
| **Web**      | [**Stan Playground**](https://github.com/flatironinstitute/stan-playground) | Browser-based editor and runtime environment for Stan models. **Highly recommended for new users.** |
| **Julia**    | [**Stan.jl**](http://stanjulia.github.io/Stan.jl/stable/INTRO/) | Interface to Stan for Julia users. |
| **MATLAB**   | [**MatlabStan**](https://github.com/brian-lau/MatlabStan/wiki) | Interface to Stan for MATLAB users. |
| **Shell**    | [**CmdStan**](https://mc-stan.org/cmdstan) | Command-line interface to Stan, usable from any shell environment. |
| **R**   | [**RStan**](https://mc-stan.org/rstan) | Legacy R interface to Stan. *(For new projects, consider using CmdStanR.)* |
| **Python**   | [**PyStan**](https://mc-stan.org/pystan) | Legacy Python interface to Stan. *(For new projects, consider using CmdStanPy.)* |

---

## High-Level Modeling Interfaces

*Simplify model specification using familiar syntax and frameworks.*

| **Language** | **Tool** | **Description** |
|--------------|----------|-----------------|
| **R**        | [**brms**](https://paul-buerkner.github.io/brms/) | Use extended `lme4`-like formula syntax to specify and fit multivariate and multilevel models in Stan. *(Requires CmdStanR and C++ compiler.)* |
| **R**        | [**rstanarm**](https://mc-stan.org/rstanarm) | Provides stable, efficient Stan versions of R model-fitting packages. *(Stan models are pre-compiled, no C++ compiler needed.)* |
| **Python**   | [**Bambi**](https://bambinos.github.io/bambi/) | Bayesian models in Python using formula syntax, built on top of Stan and PyMC. |

---

## Visualization, Diagnostics, and Validation Tools

*Validate, visualize, and compare fitted models to ensure robust results.*

| **Language** | **Tool** | **Description** |
|--------------|----------|-----------------|
| **R**        | [**bayesplot**](https://mc-stan.org/bayesplot/) | Plotting functions for posterior analysis, diagnostics, and model checking. |
| **R**        | [**loo**](https://mc-stan.org/loo/) | Efficient leave-one-out cross-validation and WAIC for Bayesian models. |
| **R**        | [**posterior**](https://mc-stan.org/posterior) | Tools for working with posterior distributions. |
| **R**        | [**projpred**](https://mc-stan.org/projpred) | Projection predictive variable selection for Bayesian models. |
| **Python**   | [**ArviZ**](https://python.arviz.org/en/stable/) | Exploratory analysis of Bayesian models with extensive visualization capabilities. |
| **Julia**    | [**ArviZ.jl**](https://julia.arviz.org/ArviZ/stable/) | Julia interface to ArviZ for Bayesian analysis. |
| **Web**      | [**MCMC Monitor**](https://github.com/flatironinstitute/mcmc-monitor) | Web-based tool for monitoring MCMC diagnostics. |

---

## Developer Tools and APIs

*Access Stan's computational backend for advanced applications and development.*

| **Language**           | **Tool** | **Description** |
|------------------------|----------|-----------------|
| **C++**                | [**Stan Math Library**](https://mc-stan.org/math/) | Automatic differentiation and mathematical functions used by Stan. |
| **Multiple Languages** | [**BridgeStan**](https://roualdes.github.io/bridgestan/latest/) | Library providing bindings to a model's log densities, gradients, and more for C++, Python, Julia, R, and Rust. |
| **R**                  | [**rstantools**](https://mc-stan.org/rstantools/) | Tools for developers of R packages interfacing with Stan. |

---

## Editor and IDE Support

*Enhance your coding experience with Stan language support in your favorite editor.*

| **Editor/IDE**         | **Tool** | **Description** |
|------------------------|----------|-----------------|
| **RStudio**            | **Built-in Support** | RStudio 1.2+ includes Stan syntax highlighting and code snippets. |
| **Visual Studio Code** | [**Stan VSCode Extension**](https://marketplace.visualstudio.com/items?itemName=stan-dev.stan-vscode) | Stan language support with syntax highlighting, autocompletion, and snippets. |
| **Emacs**              | [**stan-mode**](https://github.com/stan-dev/stan-mode) | Major mode for Stan with syntax highlighting and indentation. |
| **Vim**                | [**stan-vim**](https://github.com/eigenfoo/stan-vim) | Syntax highlighting, indentation, and code folding for Stan in Vim. |
| **Atom**               | [**language-stan**](https://github.com/stan-dev/atom-language-stan) | Stan language support in Atom editor. |
| **Sublime Text**       | [**SublimeStan**](https://github.com/djsutherland/sublime-stan) | Syntax highlighting for Stan in Sublime Text. |
| **JupyterLab**         | [**jupyterlab-stan-highlight**](https://www.npmjs.com/package/jupyterlab-stan-highlight) | Syntax highlighting for Stan code blocks in JupyterLab. |
| **Markdown Editors**   | **Pandoc**, **Pygments** | Stan syntax highlighting in markdown via [Pandoc](https://pandoc.org/) and [Pygments](https://pygments.org/). |
| **LaTeX**              | [**lstbayes**](https://github.com/jrnold/lstbayes) | LaTeX listings for Stan syntax highlighting. |

---

## Additional Notes

- **Recommendation for New Users**: We suggest starting with **CmdStanR** (for R users) or **CmdStanPy** (for Python users) along with high-level interfaces like **brms** or **rstanarm** for ease of use.


---
